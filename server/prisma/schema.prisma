generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Plan {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  monthlyPrice   Float
  yearlyPrice    Float
  features       String[]
  apiCallsLimit  Int
  workflowsLimit Int
  type           SubscriptionTier
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  subscriptions  Subscription[]

  @@map("plans")
}

model Subscription {
  id                 String    @id @default(cuid())
  razorpaySubId      String?   @unique
  status             String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean   @default(false)
  interval           String
  intervalCount      Int       @default(1)
  planId             String
  userId             String    @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  payments           Payment[]
  plan               Plan      @relation(fields: [planId], references: [id])
  user               User      @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model Payment {
  id                String       @id @default(cuid())
  razorpayPaymentId String       @unique
  amount            Float
  currency          String       @default("INR")
  status            String
  orderType         String
  razorpayOrderId   String?
  razorpaySignature String?
  subscriptionId    String
  userId            String
  createdAt         DateTime     @default(now())
  metadata          Json?
  subscription      Subscription @relation(fields: [subscriptionId], references: [id])
  user              User         @relation(fields: [userId], references: [id])

  @@map("payments")
}

model User {
  id            String              @id @default(cuid())
  firebaseUid   String              @unique
  email         String              @unique
  displayName   String?
  photoURL      String?
  emailVerified Boolean             @default(false)
  role          UserRole            @default(USER)
  firstName     String?
  lastName      String?
  company       String?
  jobTitle      String?
  apiCallsUsed  Int                 @default(0)
  workflowsUsed Int                 @default(0)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  lastLoginAt   DateTime?
  apiKeys       ApiKey[]
  integrations  Integration[]
  notifications Notification[]
  payments      Payment[]
  subscription  Subscription?
  executions    WorkflowExecution[]
  workflows     Workflow[]

  @@map("users")
}

model Workflow {
  id               String              @id @default(cuid())
  name             String
  description      String?
  definition       Json
  isActive         Boolean             @default(true)
  isPublic         Boolean             @default(false)
  category         String?
  tags             String[]
  version          Int                 @default(1)
  triggerType      TriggerType
  triggerConfig    Json?
  timeout          Int                 @default(300)
  retryAttempts    Int                 @default(3)
  totalRuns        Int                 @default(0)
  successfulRuns   Int                 @default(0)
  failedRuns       Int                 @default(0)
  lastExecutedAt   DateTime?
  avgExecutionTime Float?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  userId           String
  executions       WorkflowExecution[]
  schedules        WorkflowSchedule[]
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("workflows")
}

model WorkflowExecution {
  id            String          @id @default(cuid())
  status        ExecutionStatus
  startedAt     DateTime        @default(now())
  completedAt   DateTime?
  duration      Float?
  inputData     Json?
  outputData    Json?
  errorMessage  String?
  errorStack    String?
  stepsExecuted Json[]
  currentStep   Int?
  totalSteps    Int?
  triggerSource String?
  executionMode ExecutionMode   @default(NORMAL)
  createdAt     DateTime        @default(now())
  workflowId    String
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow      Workflow        @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_executions")
}

model Integration {
  id             String          @id @default(cuid())
  name           String
  type           IntegrationType
  config         Json
  isActive       Boolean         @default(true)
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?
  totalCalls     Int             @default(0)
  lastUsedAt     DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

model WorkflowSchedule {
  id             String    @id @default(cuid())
  cronExpression String
  timezone       String    @default("UTC")
  isActive       Boolean   @default(true)
  nextRunAt      DateTime?
  lastRunAt      DateTime?
  runCount       Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  workflowId     String
  workflow       Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_schedules")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  metadata  Json?
  actionUrl String?
  createdAt DateTime         @default(now())
  readAt    DateTime?
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ApiKey {
  id            String    @id @default(cuid())
  name          String
  keyHash       String    @unique
  keyPreview    String
  permissions   String[]
  lastUsedAt    DateTime?
  totalRequests Int       @default(0)
  rateLimit     Int?
  expiresAt     DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum SubscriptionTier {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum TriggerType {
  MANUAL
  WEBHOOK
  SCHEDULE
  EMAIL
  API_CALL
  FILE_UPLOAD
  DATABASE_CHANGE
}

enum ExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
  TIMEOUT
}

enum ExecutionMode {
  NORMAL
  TEST
  DEBUG
}

enum IntegrationType {
  GMAIL
  SLACK
  NOTION
  GOOGLE_SHEETS
  AIRTABLE
  SALESFORCE
  HUBSPOT
  WEBHOOK
  REST_API
  GRAPHQL
  DATABASE
  FTP
  SFTP
  AWS_S3
  DROPBOX
  GOOGLE_DRIVE
  CUSTOM
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  WORKFLOW_COMPLETE
  WORKFLOW_FAILED
  INTEGRATION_CONNECTED
  INTEGRATION_DISCONNECTED
  SUBSCRIPTION_UPDATED
  QUOTA_WARNING
  QUOTA_EXCEEDED
}
